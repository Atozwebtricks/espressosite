---
// Minimal test page for Supabase connection
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from 'astro:env/client';

console.log('TEST: Environment variables check');
console.log('PUBLIC_SUPABASE_URL:', PUBLIC_SUPABASE_URL ? 'Set' : 'Missing');
console.log('PUBLIC_SUPABASE_ANON_KEY:', PUBLIC_SUPABASE_ANON_KEY ? 'Set' : 'Missing');

let testResult = null;
let errorMessage = null;

try {
  if (!PUBLIC_SUPABASE_URL || !PUBLIC_SUPABASE_ANON_KEY) {
    throw new Error('Missing Supabase environment variables');
  }

  console.log('TEST: Attempting Supabase connection...');
  
  // Use direct fetch instead of Supabase client for maximum compatibility
  const response = await fetch(`${PUBLIC_SUPABASE_URL}/rest/v1/espresso_machines?select=id,name,brand&limit=1`, {
    headers: {
      'apikey': PUBLIC_SUPABASE_ANON_KEY,
      'Authorization': `Bearer ${PUBLIC_SUPABASE_ANON_KEY}`,
      'Content-Type': 'application/json',
    },
  });

  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }

  const data = await response.json();
  testResult = {
    success: true,
    data: data,
    count: data.length
  };
  
  console.log('TEST: Success!', testResult);
  
} catch (error) {
  console.error('TEST: Error:', error);
  errorMessage = error instanceof Error ? error.message : String(error);
  testResult = {
    success: false,
    error: errorMessage
  };
}
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Supabase Connection Test</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 2rem; }
    .success { color: green; }
    .error { color: red; }
    pre { background: #f5f5f5; padding: 1rem; border-radius: 4px; }
  </style>
</head>
<body>
  <h1>Supabase Connection Test</h1>
  
  <h2>Environment Variables</h2>
  <ul>
    <li>PUBLIC_SUPABASE_URL: {PUBLIC_SUPABASE_URL ? '✅ Set' : '❌ Missing'}</li>
    <li>PUBLIC_SUPABASE_ANON_KEY: {PUBLIC_SUPABASE_ANON_KEY ? '✅ Set' : '❌ Missing'}</li>
  </ul>

  <h2>Connection Test</h2>
  {testResult?.success ? (
    <div class="success">
      <h3>✅ Success!</h3>
      <p>Successfully connected to Supabase and fetched data.</p>
      <pre>{JSON.stringify(testResult, null, 2)}</pre>
    </div>
  ) : (
    <div class="error">
      <h3>❌ Error</h3>
      <p>Failed to connect to Supabase:</p>
      <pre>{errorMessage || 'Unknown error'}</pre>
    </div>
  )}

  <h2>Debug Info</h2>
  <ul>
    <li>Timestamp: {new Date().toISOString()}</li>
    <li>User Agent: {Astro.request.headers.get('user-agent')}</li>
    <li>Cloudflare Headers: {JSON.stringify(Object.fromEntries([...Astro.request.headers.entries()].filter(([key]) => key.startsWith('cf-'))))}</li>
  </ul>
</body>
</html> 