---
import Layout from '../layouts/Layout.astro';
import MachineList from '../components/MachineList.svelte';
import FAQ from '../components/FAQ.svelte';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from 'astro:env/client';

// Server-side rendering with client-side store for persistence

// Server-side data fetching for SEO using astro:env (Cloudflare Workers compatible)
async function fetchMachinesForSSR() {
  try {
    const supabaseUrl = PUBLIC_SUPABASE_URL;
    const supabaseKey = PUBLIC_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      console.warn('SSR: Missing Supabase credentials, falling back to empty data');
      console.warn('SSR: PUBLIC_SUPABASE_URL exists:', !!supabaseUrl);
      console.warn('SSR: PUBLIC_SUPABASE_ANON_KEY exists:', !!supabaseKey);
      return { data: [], error: null };
    }

    console.log('SSR: Fetching machines from Supabase...');
    console.log('SSR: Using URL:', supabaseUrl.substring(0, 30) + '...');
    
    const response = await fetch(`${supabaseUrl}/rest/v1/espresso_machines?select=*&order=brand.asc`, {
      headers: {
        'apikey': supabaseKey,
        'Authorization': `Bearer ${supabaseKey}`,
        'Content-Type': 'application/json',
      },
    });

    console.log('SSR: Response status:', response.status);
    console.log('SSR: Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('SSR: Supabase API error:', response.status, response.statusText);
      console.error('SSR: Error response body:', errorText);
      return { data: [], error: `API error: ${response.status} - ${response.statusText}` };
    }

    const machines = await response.json();

    if (!machines || machines.length === 0) {
      console.warn('SSR: No machines found in database');
      return { data: [], error: null }; // Don't treat empty data as an error
    }

    console.log(`SSR: Successfully fetched ${machines.length} machines`);
    return { data: machines, error: null };
  } catch (err) {
    console.error('SSR: Error fetching machines:', err);
    console.error('SSR: Error details:', err instanceof Error ? err.message : String(err));
    return { data: [], error: null }; // Fail gracefully for SSR
  }
}

// Fetch machines for static rendering - always provide fallback data
let machines: any[] = [];
let fetchError: string | null = null;

try {
  const result = await fetchMachinesForSSR();
  machines = result.data || [];
  fetchError = result.error;
} catch (error) {
  console.error('SSR: Failed to fetch machines:', error);
  // Don't show error to user - client-side store will handle it
  machines = [];
  fetchError = null;
}

// Don't fetch images on server-side to improve performance
// Images will be loaded on-demand by the client-side components
const machinesWithImages = machines?.map(machine => ({
  ...machine,
  signedImageUrl: null, // Will be loaded client-side
  image_caption: machine.image_caption,
  image_source: machine.image_source,
})) || [];

// Generate static metadata for SEO regardless of data fetch success
const pageTitle = "Espresso Machine Comparison - Compare Top Coffee Machines";
const pageDescription = "Compare specifications, prices, and features of the best espresso machines. Find the perfect coffee machine for your home or office with our comprehensive comparison tool.";

// Structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": "Espresso Machine Comparison",
  "description": pageDescription,
  "url": Astro.site,
  "potentialAction": {
    "@type": "SearchAction",
    "target": {
      "@type": "EntryPoint",
      "urlTemplate": `${Astro.site}?search={search_term_string}`
    },
    "query-input": "required name=search_term_string"
  }
};

// Add cache control headers for ISR
Astro.response.headers.set(
  'Cache-Control',
  'public, max-age=0, s-maxage=300, stale-while-revalidate=3600'
);
---

<Layout title={pageTitle} description={pageDescription}>
	<!-- Structured Data -->
	<script type="application/ld+json" slot="head" set:html={JSON.stringify(structuredData)}></script>

	<section class="max-w-4xl mx-auto px-5 pt-12 pb-12 lg:pt-12 lg:pb-20 text-center">
		<h1 class="font-serif font-extrabold text-primary leading-[1.2] text-4xl sm:text-6xl md:text-[5rem]">
			<span class="block">Compare</span>
			<span class="block">espresso machines</span>
		</h1>
		<p class="mt-6 max-w-2xl leading-relaxed mx-auto text-base md:text-xl text-dark">
			Pick the perfect espresso machine <br> for your home using the comparison table.
		</p>
	</section>

	<section class="max-w-10xl mx-auto px-3 lg:px-16 pb-4">
		<div class="border-border">
			<MachineList client:only="svelte" allMachines={machinesWithImages} />
		</div>
	</section>

  <div class="h-[1px] bg-gray-300 w-3xs mx-auto"></div>

	<!-- FAQ Section -->
	<FAQ client:only="svelte" />
</Layout>
